Networking Is Not About Sockets
A People vs Computers Analogy
Networking has exploded over the last decade or so. There was a time when the business pundits declared confidently that commerce would never happen over infrastructure as immature and unreliable as the Internet. Now, it becomes more and more difficult to manage a modern life without resorting to your smartphone. In the ideal case, it takes a few minutes with an app to resolve your latest need, perhaps with a few additional minutes to "like" everything in the user experience survey. As a solution to the moment, that is an amazing thing. Where are those pundits now?
To deliver that user experience, a long list of technologies needed to come together. DARPA had to gift the Internet to the academic world, Apple had to invent the iPhone and cellular networks had to transition from analogue to digital underpinnings (i.e. provide Internet connectivity). Once it was all in place, the progression to where we are now was inexorable.
Underneath every slick user experience are several layers of software, from the lowest level that interfaces with the physical world, through to the software that transfers messages like GetUserAccount between the app and the website. This layering is captured in the OSI model. Without the development of strong standards in the different layers there would not be the networking environment - spanning multiple products from multiple vendors - enjoyed by smartphone apps today.
In general, each layer implements its own abstractions and maintains behavioural contracts with the layers above and below. For fairly obvious engineering reasons there should be no layer jumping; layer 7 (application) should not make reference to abstractions at layer 4 (transport). Or at least, that is the grand intention.
Even today the proper layering is in dispute (OSI vs Internet suite) and the OSI model was always notional rather than concrete. The protocol wars and the lack of concrete examples is a convenient explanation for why so many modern applications break the layer jumping rule. If applications are not supposed to open sockets (i.e. a transport) to send requests (i.e. between applications) then what exactly should they be opening? If an amazing user experience can be delivered by an instance of one such unprincipled app then what is there left to be concerned about?
This document proposes a missing piece. It uses an analogy to break down the problem domain into a rational collection of parts and also highlight the lack of a certain entity. It suggests that the absence of this piece is at the root of at least some of the problems in this domain. Lastly, there are a set of links to further introductory documents and a software library. The software library implements a networking framework that fills in the missing piece.
A Breakdown Of People Talking
