11-1
designing+prototyping mechanisms for control over logging in webman env.
ultimately need to stream logs down standard loggers
one per thread
custom routines and threaded objects
dispatched objects and their dispatcher threads

default is to log everything.
all objects
lifecycle, message_trail, execution_trace and user_logs

2-8
implementation of logging/threading design with constraint
of single logger per thread.
multiple attempts that got increasingly complex and also
exposing related constraints at user level - see posts
with nic;

Scott Woods [5:32 PM]
bah. constraints related to logging.getLoggers causing bending+twisting implementation and
limiting the nature of the messaging layer. if i include the natural capability for sync
objects (how all sync code interacts with the async world) to log then it will become a logger
per sync/async interaction. this would include the current interactions between the sync
managerclient.Manager and all its hidden async children. each sync request to the Manager
causes the creation of a sync interface object and hence a logger. the alternative of no logger
in sync objects means that no sync/async interaction has logging ability - NGAAAARGH. going to
look at the consequences of reverting to original logging strategy where messaging layer will
only every create/use a single logging.getLogger('webman.messaging_layer').


Nic Bellamy [5:33 PM] 
if we can do some sort of structured logging so we can pull out the original information - without leaking lots of loggers - that will achieve the goal, no?


Scott Woods [5:35 PM] 
for sure. and you comfortable with the fact that the "structure" would only apply to entries originating from the messaging code?


[5:35] 
the webman log would become  "ragged".


Nic Bellamy [5:35 PM] 
gotta start somewhere - can we use one of the structured logging packages, rather than rolling out own?


[5:36] 
the start of the messages would need to stay the same - date format, logger info, etc.


[5:36] 
trailing data could differ


Scott Woods [5:38 PM] 
yep (to your last post). not sure why a different package would be needed. unless you are talking
about converting all webman logs to the new structure.which is what you would prob have to do as no
structured logging package is going to accept mixed structure, i.e. webman-format\n\webman-format\nmessaging-layer\nwebman-format\n....


Nic Bellamy [5:39 PM] 
depends how they do it - some just append a tab then encoded key-value pairs at the end


[5:39] 
another option would be outputting to a different log destination; then the format is up to us


Scott Woods [5:40 PM] 
im happy to place the messaging layer details into the trailing data part of the existing format. what analysis tools are we using beside eyes-on-consoles?


Nic Bellamy [5:40 PM] 
none at this point


[5:40] 
but having the option for them later would be good


[5:40] 
(I've been using structured logging in my Go code, rather liking it)


Scott Woods [5:44 PM] 
well, for a shift such as moving to structured logging i would guess that the entire codebase would
need to be upgraded. might as well include upgrade of messaging and living with a hybrid in the meantime
sounds more complex in several aspects (codebase, analysis...). yeah was on structured logging (POSIX and
others) as long as 10 years ago. its great if..... a story for another day.


Nic Bellamy [5:45 PM] 
Yeah. I don't want to add more complexity unless it's giving us value.


Scott Woods [5:47 PM] 
sweet. a single webman.messaging_layer logger it is, conforming to existing layout.
