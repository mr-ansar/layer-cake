	There are 3 streams of events that determine behaviour with
	respect to subscriber matches, 1) the stream of routes sent
	from directories, 2) the termination of loops for different
	reasons, and 3) the removal of routes on instruction from
	a directory (retract and cap).

	The simplest complete cycle is to receive a single route,
	create the loop and the loop runs to completion. In this
	scenario there is no more to do. The controller receives
	a Cleared(value) and may or may not initiate an application
	shutdown.

	A more complete view is that every instance of looping
	*starts* in the same way but from that point on is subject
	to premature terminations (e.g. NotPeered, PeerLost,
	CloseLoop), updated routes (e.g. after network recovery)
	and better routes (e.g. LAN vs RELAY). Implementing a
	robust and intuitive behaviour within this scenario is
	a bit of a challenge.

	It all starts with the stream of routes. For the first
	route the proper response is obvious - start a loop.
	All subsequent routes are either better, the same or
	not significant.
	
	All routes from the stream are retained in a
	table[scope]=route. They are there for LCR analysis,
	i.e. what is the best route to take at any given moment?

	New routes at the same scope as the "running" route are
	potentially update routes, arising when a publisher
	reenters the directory in some way - either due to
	network recovery or a server process restart, or its a
	duplicate (ignored). For this category of events the
	proper response is to wait for the current loop to run
	into related difficulties and to terminate. Special
	processing of terminations will infer the situation and
	cause the creation of a new loop with the updated
	information.

	New routes with lower scopes (e.g. HOST vs LAN) are
	considered "better" and require immediate action - the
	network	is running on a sub-optimal route. The current
	loop must be "pushed out" and a new loop started with
	the new route. A message is sent to the current session
	and it subsequently terminates. Special processing of
	terminations infers the situation and causes the
	creation of a new loop, i.e. on the better route.

	New routes with higher scopes are considered "worse"
	and do not require immediate action. The routes are
	retained for possible use as fallbacks - to be
	actioned if a better route fails prematurely.

	The combined behaviour with respect to "better" and
	"worse" routes means that the system is always
	proactively moving towards the best-possible routing
	but will fallback to anything available. There may
	be cycles between best, worst and nothing (i.e no
	routes available).

